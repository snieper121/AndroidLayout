# .github/workflows/android-ci.yml

name: Android CI Build

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Шаг 1: Клонирование репозитория
    - name: Checkout repository
      uses: actions/checkout@v4

    # Шаг 2: Настройка JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Шаг 3: Кэширование Gradle
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}-v2
        restore-keys: |
          ${{ runner.os }}-gradle-

    # Шаг 4: Декодирование ключа подписи
    - name: Decode Keystore
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > ${{ github.workspace }}/app/debug.keystore

    # Шаг 5: Права на исполнение для gradlew
    - name: Make gradlew executable
      run: chmod +x ./gradlew

    # Шаг 6: Сборка ОРИГИНАЛЬНОГО APK
    - name: Build with Gradle
      env:
        SIGNING_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        SIGNING_STORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      run: ./gradlew assembleDebug

    # =====================================================================
    #           НОВЫЕ ШАГИ: ИСПРАВЛЕНИЕ УЖЕ СОБРАННОГО APK
    # =====================================================================

    # Шаг 7: Установка apktool
    - name: Install apktool
      run: |
        sudo wget https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool -O /usr/local/bin/apktool
        sudo chmod +x /usr/local/bin/apktool
        sudo wget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.9.3.jar -O /usr/local/bin/apktool.jar
        sudo chmod +x /usr/local/bin/apktool.jar

    # Шаг 8: Распаковка APK
    - name: Decompile APK
      run: apktool d app/build/outputs/apk/debug/app-debug.apk -o decompiled-apk

    # Шаг 9: Замена манифеста
    - name: Replace Manifest
      run: |
        echo "Replacing manifest in decompiled folder..."
        # Убедитесь, что ваш правильный манифест лежит по пути app/src/main/AndroidManifest.xml
        cp app/src/main/AndroidManifest.xml decompiled-apk/AndroidManifest.xml

    # Шаг 10: Пересборка APK
    - name: Rebuild APK
      run: apktool b decompiled-apk -o fixed-app.apk

    # Шаг 11: Подпись исправленного APK
    - name: Sign the fixed APK
      run: |
        jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 \
        -keystore ${{ github.workspace }}/app/debug.keystore \
        -storepass ${{ secrets.KEYSTORE_PASSWORD }} \
        -keypass ${{ secrets.KEY_PASSWORD }} \
        fixed-app.apk ${{ secrets.KEY_ALIAS }}

    # =====================================================================

    # Шаг 12: Загрузка ИСПРАВЛЕННОГО APK как артефакта
    - name: Upload Fixed APK
      uses: actions/upload-artifact@v4
      with:
        name: fixed-app-debug-apk
        path: fixed-app.apk # Загружаем наш исправленный и подписанный APK
